# MIT License
# Copyright(c) 2022 Futurewei Cloud
#     Permission is hereby granted,
#     free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
#     including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
#     to whom the Software is furnished to do so, subject to the following conditions:
#     The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#     FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
#     WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.


# Merak namespace
apiVersion: v1
kind: Namespace
metadata:
  name: merak
---
apiVersion: v1
kind: Service
metadata:
  name: merak-compute-service
  namespace: merak
spec:
  selector:
    app: merak-compute
  ports:
    - protocol: TCP
      name: grpc
      port: 40051
      targetPort: compute-grpc
  type: ClusterIP
---
# Merak Compute Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merak-compute
  namespace: merak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: merak-compute
  template:
    metadata:
      labels:
        app: merak-compute
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: merak-compute
        image: meraksim/merak-compute:dev
        imagePullPolicy: Always
        ports:
          - containerPort: 40051
            name: compute-grpc
        env:
        - name: "TEMPORAL"
          value: "temporaltest-frontend.default.svc.cluster.local"
---
# Merak Compute VM Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merak-compute-vm-worker
  namespace: merak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: merak-compute-vm-worker
  template:
    metadata:
      labels:
        app: merak-compute-vm-worker
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: merak-compute-vm-worker
        image: meraksim/merak-compute-vm-worker:dev
        imagePullPolicy: Always
        env:
        - name: "TEMPORAL"
          value: "temporaltest-frontend.default.svc.cluster.local"
# Single Redis Leader.
# TODO: Add followers and follower service
---
apiVersion: v1
kind: Service
metadata:
  name: compute-redis-main
  namespace: merak
  labels:
    app: redis
    role: main
    tier: backend
spec:
  ports:
  - protocol: TCP
    port: 30051
    targetPort: compute-redis
  selector:
    app: redis
    role: main
    tier: backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: compute-redis-main
  namespace: merak
  labels:
    app: redis
    role: main
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        role: main
        tier: backend
    spec:
      containers:
      - name: main
        image: "redis:7.0.0"
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
          name: compute-redis
---
apiVersion: v1
kind: Service
metadata:
  name: merak-network-service
  namespace: merak
spec:
  selector:
    app: merak-network
  ports:
    - protocol: TCP
      name: grpc
      port: 40053
      targetPort: network-grpc
  type: ClusterIP
---
# Merak Network Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merak-network
  namespace: merak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: merak-network
  template:
    metadata:
      labels:
        app: merak-network
    spec:
      tolerations:
        - key: "node-role.kubernetes.io/master"
          operator: "Exists"
          effect: "NoSchedule"
      containers:
        - name: merak-network
          image: meraksim/merak-network:dev
          imagePullPolicy: Always
          ports:
            - containerPort: 40053
              name: network-grpc
---
apiVersion: v1
kind: Service
metadata:
  name: network-redis-main
  namespace: merak
  labels:
    app: redis
    role: main
    tier: backend
spec:
  ports:
    - protocol: TCP
      port: 30053
      targetPort: network-redis
  selector:
    app: redis
    role: main
    tier: backend
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-main
  namespace: merak
  labels:
    app: redis
    role: main
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        role: main
        tier: backend
    spec:
      containers:
        - name: main
          image: "redis:7.0.0"
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
          ports:
            - containerPort: 6379
              name: network-redis
---
apiVersion: v1
kind: Service
metadata:
  name: scenario-manager-service
  namespace: merak
spec:
  selector:
    app: scenario-manager
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      nodePort: 32000
  type: NodePort
---
# Merak Scenario-Manager Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scenario-manager
  namespace: merak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: scenario-manager
  template:
    metadata:
      labels:
        app: scenario-manager
    spec:
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: scenario-manager
        image: meraksim/scenario-manager:dev
        imagePullPolicy: Always
        ports:
          - containerPort: 3000
---
apiVersion: apps/v1  # API version
kind: Deployment
metadata:
  name: scenario-redis-master # Unique name for the deployment
  namespace: merak
  labels:
    app: scenario-redis       # Labels to be applied to this deployment
spec:
  selector:
    matchLabels:     # This deployment applies to the Pods matching these labels
      app: scenario-redis
      role: master
      tier: backend
  replicas: 1        # Run a single pod in the deployment
  template:          # Template for the pods that will be created by this deployment
    metadata:
      labels:        # Labels to be applied to the Pods in this deployment
        app: scenario-redis
        role: master
        tier: backend
    spec:            # Spec for the container which will be run inside the Pod.
      containers:
      - name: scenario-redis-master
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service        # Type of Kubernetes resource
metadata:
  name: scenario-redis-master # Name of the Kubernetes resource
  namespace: merak
  labels:            # Labels that will be applied to this resource
    app: scenario-redis
    role: master
    tier: backend
spec:
  ports:
  - port: 55000       # Map incoming connections on port 6379 to the target port 6379 of the Pod
    targetPort: 6379
  selector:          # Map any Pod with the specified labels to this service
    app: scenario-redis
    role: master
    tier: backend
---
# Merak-topology service account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: merak-topology
  namespace: merak
---
# Cluster role binding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: merak-topology
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
  - kind: ServiceAccount
    name: merak-topology
    namespace: merak
---
# Merak-topology service
apiVersion: v1
kind: Service
metadata:
  name: merak-topology-service
  namespace: merak
spec:
  selector:
    app: merak-topology
  ports:
    - protocol: TCP
      name: grpc
      port: 40052
      targetPort: topology-grpc
  type: ClusterIP
---
# Merak Topo Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: merak-topology
  namespace: merak
spec:
  replicas: 1
  selector:
    matchLabels:
      app: merak-topology
  template:
    metadata:
      labels:
        app: merak-topology
    spec:
      serviceAccountName: merak-topology
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      containers:
      - name: merak-topology
        image: meraksim/merak-topo:dev
        imagePullPolicy: Always
        ports:
          - containerPort: 40052
            name: topology-grpc
---
# Redis Deployment
apiVersion: apps/v1  # API version
kind: Deployment
metadata:
  name: topology-redis-master # Unique name for the deployment
  labels:
    app: topology-redis       # Labels to be applied to this deployment
spec:
  selector:
    matchLabels:     # This deployment applies to the Pods matching these labels
      app: topology-redis
      role: master
      tier: backend
  replicas: 1     # Run a single pod in the deployment
  template:          # Template for the pods that will be created by this deployment
    metadata:
      labels:        # Labels to be applied to the Pods in this deployment
        app: topology-redis
        role: master
        tier: backend
    spec:            # Spec for the container which will be run inside the Pod.
      containers:
      - name: topology-redis-master
        image: redis
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service        # Type of Kubernetes resource
metadata:
  name: topology-redis-master # Name of the Kubernetes resource
  labels:            # Labels that will be applied to this resource
    app: topology-redis
    role: master
    tier: backend
spec:
  ports:
  - port: 55001       # Map incoming connections on port 55001 to the target port 55001 of the Pod
    targetPort: 6379
  selector:          # Map any Pod with the specified labels to this service
    app: topology-redis
    role: master
    tier: backend

# RYU controller deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ryu-deployment
spec:
  selector:
    matchLabels:
      app: ryu
  replicas: 5
  template:
    metadata:
      labels:
        app: ryu
    spec:
     #hostNetwork: true
      containers:
      - name: ryu
        image: osrg/ryu
        args:
          - ryu-manager
          - ./ryu/ryu/app/simple_switch_13.py
        ports:
        - containerPort: 6653
          name: openflow
