
/*
MIT License
Copyright(c) 2022 Futurewei Cloud
    Permission is hereby granted,
    free of charge, to any person obtaining a copy of this software and associated documentation files(the "Software"), to deal in the Software without restriction,
    including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
    to whom the Software is furnished to do so, subject to the following conditions:
    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

syntax="proto3";
package topology;
import "common.proto";
option go_package = "github.com/futurewei-cloud/merak/api/proto/v1/topology;topology";

enum TopologyType {
    SINGLE = 0;
    LINEAR = 1;
    TREE = 2;
    REVERSED = 3;
    MESH = 4;
    CUSTOM = 5;
}

enum VNodeType {
    VHOST = 0;
    VSWITCH = 1;
    VGATEWAY = 2;
    VROUTER = 3;
}

message InternalVNicInfo {
    common.OperationType operation_type = 1;
    string id = 2;
    string name = 3;
    string ip = 4;
}

message InternalVNodeInfo {
    common.OperationType operation_type = 1;
    string id = 2;
    string name = 3;
    VNodeType type = 4;
    repeated InternalVNicInfo vnics = 5;
}

message InternalVLinkInfo {
    common.OperationType operation_type = 1;
    string id = 2;
    string name = 3;
    string src = 4;
    string dst = 5;
}

message InternalTopologyImage {
    common.OperationType operation_type = 1;
    string id = 2;
    string name = 3;
    VNodeType type = 4;
    string registry = 5;
    repeated string cmd = 6;
    repeated string args = 7;
}

message InternalTopologyConfiguration {
    uint32 format_version = 1;
    uint32 revision_number = 2;
    string request_id = 3;
    common.MessageType message_type = 4;
    string topology_id = 5;
    string name = 6;
    TopologyType topology_type = 7;
    uint32 number_of_vhosts = 8;
    uint32 number_of_racks = 9;
    uint32 vhost_per_rack = 10;
    string data_plane_cidr = 11;
    uint32 number_of_gateways = 12;
    repeated string gateway_ips = 13;
    repeated InternalTopologyImage images = 14;
    repeated InternalVNodeInfo vnodes = 15;
    repeated InternalVLinkInfo vlinks = 16;
    InternalTopologyExtraInfo extra_info = 17;
    uint32 ports_per_vswitch = 18;
}

message InternalTopologyInfo {
    common.OperationType operation_type = 1;
    InternalTopologyConfiguration config = 2;
}

message InternalTopologyExtraInfo {
    string info = 1;
}

message ReturnTopologyMessage {
    common.ReturnCode return_code = 1;
    string return_message = 2;
    repeated common.InternalComputeInfo compute_nodes = 3;
    repeated common.InternalHostInfo hosts = 4;
}

service MerakTopologyService {
    rpc TopologyHandler (InternalTopologyInfo) returns (ReturnTopologyMessage) {}
    rpc TestHandler (InternalTopologyInfo) returns (ReturnTopologyMessage) {}
}

